package com.te.lmsp.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import lombok.RequiredArgsConstructor;

@EnableWebSecurity
@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
	private final JwtAuthenticationFilter filter;

	@Bean
	public SecurityFilterChain getSecurityFilterChain(HttpSecurity http) throws Exception {
		http.csrf(csrf -> csrf.disable());
		http.authorizeHttpRequests(request -> request.requestMatchers("/employee/requests")
				.hasRole("EMPLOYEE"));
		http.authorizeHttpRequests(request -> request.requestMatchers("/employee/updatepassword")
				.hasRole("EMPLOYEE"));
		http.authorizeHttpRequests(request -> request.requestMatchers("/employee/**").hasAnyRole("ADMIN"));
		http.authorizeHttpRequests(
				request -> request.requestMatchers(HttpMethod.POST, "/auth/updatepassword").permitAll());
		http.authorizeHttpRequests(request -> request.requestMatchers("/admin/**").permitAll());
		http.authorizeHttpRequests(
				requests -> requests.requestMatchers("/auth/**").permitAll().anyRequest().authenticated());

		http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);
		return http.build();
	}
}
