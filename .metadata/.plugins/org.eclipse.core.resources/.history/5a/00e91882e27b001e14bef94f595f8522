package com.te.lmsp.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.te.lmsp.dto.BatchDTO;
import com.te.lmsp.dto.BatchMentorDTO;
import com.te.lmsp.dto.EmpAttendenceDTO;
import com.te.lmsp.dto.EmployeeDTO;
import com.te.lmsp.dto.MentorEmpDetailsDTO;
import com.te.lmsp.dto.MockDetailsDTO;
import com.te.lmsp.dto.MockSheduleDTO;
import com.te.lmsp.entity.Employee;
import com.te.lmsp.entity.MockDetails;
import com.te.lmsp.exception.DuplicateMockException;
import com.te.lmsp.service.MentorService;

import lombok.RequiredArgsConstructor;

@RequestMapping(path = "/mentor")
@RequiredArgsConstructor
@RestController
public class MentorController {

	private final MentorService mentorService;

	@GetMapping(path = "/batch")
	public BatchMentorDTO getBatchDetails(@RequestParam("id") String batchId) {
		BatchMentorDTO batMenDto = mentorService.getBatchDetails(batchId);
		return batMenDto;
	}

	@GetMapping(path = "/batchlist")
	public List<BatchDTO> getBatchList() {
		List<BatchDTO> batches = mentorService.getBatchList();
		return batches;
	}

	@GetMapping(path = "/employees")
	public List<EmpAttendenceDTO> getEmployees(@RequestParam("id") String batchId) {
		List<EmpAttendenceDTO> employees = mentorService.getEmployees(batchId);
		return employees;
	}
	
	@GetMapping(path = "/batch/employees")
	public List<MentorEmpDetailsDTO> getEmployee(@RequestParam("id") String batchId) {
		List<MentorEmpDetailsDTO> employees = mentorService.getEmployee(batchId);
		return employees;
	}

	@PutMapping(path = "/morning")
	public void morningAttendence(@RequestParam boolean status, @RequestParam String empId,
			@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
		String message = mentorService.morningAttendence(status, empId, date);
	}

	@PostMapping(path = "/noon")
	public void noonAttendence(@RequestParam boolean status, @RequestParam String empId,
			@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
		String message = mentorService.noonAttendence(status, empId, date);
	}

	@GetMapping(path = "/mock")
	public void getMockRatings(int empId) {

	}

	@PostMapping(path = "/addmock")
	public void addMock(@RequestBody MockSheduleDTO mockSheduleDTO) throws DuplicateMockException {
		String msg=mentorService.registerMock(mockSheduleDTO);
	}

	@PostMapping(path = "/addrating")
	public void addRating(@RequestParam("id") String empId,@RequestBody MockDetailsDTO mockDTO) {
		String msg=mentorService.addRating(empId,mockDTO);
	}

	@PostMapping(path = "addattendence")
	public void addAttendence() {

	}
}
